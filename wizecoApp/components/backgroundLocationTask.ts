import * as Notifications from "expo-notifications";
import * as TaskManager from "expo-task-manager";
import { AppState } from "react-native";
import ApiService from "../services/ApiService";
import { AuthService } from "../services/AuthService";
import { LocationService } from "../services/LocationService";

const LOCATION_TASK_NAME = "BACKGROUND_LOCATION_TASK";

/**
 * R√©cup√©rer le token FCM
 */
async function getFCMToken(): Promise<string | null> {
  try {
    const tokenData = await Notifications.getDevicePushTokenAsync();
    return tokenData.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du token FCM:", error);
    return null;
  }
}

// V√©rifier que la t√¢che n'est pas d√©j√† d√©finie
if (TaskManager.isTaskDefined(LOCATION_TASK_NAME)) {
  console.log("‚ÑπÔ∏è T√¢che background d√©j√† d√©finie");
} else {
  console.log("üîß D√©finition de la t√¢che background...");
}

// D√©finir la t√¢che qui s'ex√©cute toutes les 30 secondes en arri√®re-plan
TaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }) => {
  if (error) {
    console.error("‚ùå Erreur background location:", error);
    return;
  }

  if (data) {
    // V√©rifier que l'app est en arri√®re-plan
    const currentAppState = AppState.currentState;
    if (currentAppState !== "background") {
      console.log(
        `‚è∏Ô∏è App au premier plan (${currentAppState}) - t√¢che ignor√©e`
      );
      return;
    }

    console.log("‚úÖ T√¢che ex√©cut√©e en arri√®re-plan (30s)");

    try {
      // V√©rifier que l'utilisateur est connect√©
      const authState = await AuthService.getAuthState();
      if (!authState.isConnected) {
        console.log("üîê Utilisateur non connect√© - t√¢che ignor√©e");
        return;
      }

      // R√©cup√©rer la position actuelle (sans demander les permissions)
      const currentLocation =
        await LocationService.getCurrentLocationWithoutPermission();
      if (!currentLocation) {
        console.log("‚ùå Impossible de r√©cup√©rer la position en arri√®re-plan");
        return;
      }

      console.log("üìç Position en arri√®re-plan:", currentLocation);

      // R√©cup√©rer le token FCM pour les notifications
      const fcmToken = await getFCMToken();
      if (!fcmToken) {
        console.log("‚ùå Token FCM non disponible");
        return;
      }

      // Envoyer la position au serveur pour notifications
      const response = await ApiService.sendLocationForNotifications(
        currentLocation.latitude,
        currentLocation.longitude,
        fcmToken,
        100 // radius par d√©faut
      );

      console.log("üì° Position envoy√©e au serveur en arri√®re-plan:", response);
    } catch (err) {
      console.error("‚ùå Erreur t√¢che arri√®re-plan:", err);
    }
  }
});

console.log("‚úÖ T√¢che background d√©finie avec succ√®s:", LOCATION_TASK_NAME);

export const LOCATION_TASK_NAME_EXPORT = LOCATION_TASK_NAME;
