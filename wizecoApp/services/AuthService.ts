import AsyncStorage from "@react-native-async-storage/async-storage";
import ApiService from "./ApiService";
import { GoogleAuthService, GoogleUser } from "./GoogleAuthService";

const AUTH_STORAGE_KEY = "@wizeco_auth_user";

export interface AuthState {
  isConnected: boolean;
  user: GoogleUser | null;
}

export class AuthService {
  // Sauvegarder l'utilisateur connect√©
  static async saveUser(user: GoogleUser): Promise<void> {
    try {
      await AsyncStorage.setItem(AUTH_STORAGE_KEY, JSON.stringify(user));
    } catch (error) {
      console.error("Erreur lors de la sauvegarde de l'utilisateur:", error);
    }
  }

  // R√©cup√©rer l'utilisateur sauvegard√©
  static async getUser(): Promise<GoogleUser | null> {
    try {
      const userData = await AsyncStorage.getItem(AUTH_STORAGE_KEY);
      if (userData) {
        return JSON.parse(userData) as GoogleUser;
      }
      return null;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration de l'utilisateur:", error);
      return null;
    }
  }

  // Supprimer l'utilisateur (d√©connexion)
  static async removeUser(): Promise<void> {
    try {
      // 1. D√©connexion du backend
      try {
        await ApiService.logout();
        console.log("‚úÖ D√©connexion backend r√©ussie");
      } catch (backendError) {
        console.error(
          "‚ö†Ô∏è Erreur lors de la d√©connexion backend:",
          backendError
        );
        // Continue m√™me si le backend √©choue
      }

      // 2. Supprimer les donn√©es locales
      await AsyncStorage.removeItem(AUTH_STORAGE_KEY);

      // 3. D√©connexion Google
      await GoogleAuthService.signOut();

      console.log("‚úÖ Utilisateur supprim√©");
    } catch (error) {
      console.error("Erreur lors de la suppression de l'utilisateur:", error);
    }
  }

  // V√©rifier si l'utilisateur est connect√©
  static async isUserConnected(): Promise<boolean> {
    const authState = await this.getAuthState();
    return authState.isConnected;
  }

  // Obtenir l'√©tat d'authentification complet
  static async getAuthState(): Promise<AuthState> {
    const user = await this.getUser();

    // V√©rifier que l'utilisateur a bien un token JWT
    if (user) {
      try {
        const token = await ApiService.getToken();
        if (!token) {
          console.log(
            "üîê Utilisateur trouv√© mais sans token JWT - d√©connexion automatique"
          );
          // Supprimer l'utilisateur local s'il n'a pas de token JWT
          await this.removeUser();
          return {
            isConnected: false,
            user: null,
          };
        }
        console.log("üîê Utilisateur connect√© avec token JWT valide");
      } catch (error) {
        console.log(
          "üîê Erreur lors de la v√©rification du token - d√©connexion automatique"
        );
        // Supprimer l'utilisateur local en cas d'erreur
        await this.removeUser();
        return {
          isConnected: false,
          user: null,
        };
      }
    }

    return {
      isConnected: user !== null,
      user,
    };
  }

  // M√©thode pour la connexion Google avec int√©gration backend
  static async signInWithGoogle(): Promise<GoogleUser | null> {
    try {
      console.log("üîê D√©but de la connexion Google...");

      // 1. Connexion Google
      const user = await GoogleAuthService.signInWithGoogle();
      if (!user) {
        console.log("‚ùå Connexion Google √©chou√©e");
        return null;
      }

      console.log("‚úÖ Connexion Google r√©ussie:", user.email);

      // 2. V√©rifier si on a un accessToken
      if (!user.accessToken) {
        console.log("‚ö†Ô∏è Aucun accessToken Google disponible");
        // On peut quand m√™me sauvegarder l'utilisateur localement
        await this.saveUser(user);
        return user;
      }

      // 3. Test de connectivit√© backend puis connexion
      try {
        console.log("üåê Test de connectivit√© avec le backend...");
        const isBackendAccessible = await ApiService.testBackendConnection();

        if (isBackendAccessible) {
          console.log("‚úÖ Backend accessible, tentative de connexion...");
          console.log(
            "üîë AccessToken Google:",
            user.accessToken ? "‚úÖ Pr√©sent" : "‚ùå Absent"
          );

          const loginResult = await ApiService.login({
            email: user.email,
            tokenAccess: user.accessToken,
            accountType: "GOOGLE",
          });
          console.log("‚úÖ Connexion backend r√©ussie:", loginResult);

          // V√©rifier que le token est bien stock√©
          const storedToken = await ApiService.getToken();
          if (!storedToken) {
            throw new Error("Token JWT non stock√© apr√®s la connexion backend");
          }
          console.log(
            "üîç Token stock√© apr√®s connexion:",
            storedToken ? "‚úÖ Pr√©sent" : "‚ùå Absent"
          );
        } else {
          console.log(
            "‚ö†Ô∏è Backend inaccessible, continuation en mode local uniquement"
          );
        }
      } catch (backendError) {
        console.error("‚ùå Erreur lors de la connexion backend:", backendError);
        // M√™me si le backend √©choue, on peut continuer avec l'auth locale
        console.log(
          "‚ö†Ô∏è Continuation avec l'authentification locale uniquement"
        );
      }

      // 4. Sauvegarder l'utilisateur
      await this.saveUser(user);
      return user;
    } catch (error) {
      console.error("‚ùå Erreur lors de la connexion Google:", error);
      return null;
    }
  }
}
