import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Location from "expo-location";

const LOCATION_STORAGE_KEY = "@wizeco_user_location";

export interface UserLocation {
  latitude: number;
  longitude: number;
}

export class LocationService {
  private static lastLocationRequest: number = 0;
  private static cachedLocation: UserLocation | null = null;
  private static readonly LOCATION_CACHE_DURATION = 30000; // 30 secondes de cache
  private static readonly REQUEST_COOLDOWN = 30000; // 30 secondes entre les requ√™tes

  /**
   * Sauvegarder la position de l'utilisateur
   */
  static async saveUserLocation(location: UserLocation): Promise<void> {
    try {
      await AsyncStorage.setItem(
        LOCATION_STORAGE_KEY,
        JSON.stringify(location)
      );
      console.log("üíæ Position sauvegard√©e:", location);
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde de la position:", error);
    }
  }

  /**
   * R√©cup√©rer la position sauvegard√©e
   */
  static async getSavedUserLocation(): Promise<UserLocation | null> {
    try {
      const savedLocation = await AsyncStorage.getItem(LOCATION_STORAGE_KEY);
      if (savedLocation) {
        const location = JSON.parse(savedLocation);
        console.log("üìÇ Position r√©cup√©r√©e du stockage:", location);
        return location;
      }
      return null;
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration de la position:", error);
      return null;
    }
  }

  /**
   * Supprimer la position sauvegard√©e
   */
  static async clearSavedLocation(): Promise<void> {
    try {
      await AsyncStorage.removeItem(LOCATION_STORAGE_KEY);
      console.log("üóëÔ∏è Position supprim√©e du stockage");
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression de la position:", error);
    }
  }

  /**
   * R√©cup√©rer une nouvelle position GPS fra√Æche (force une nouvelle r√©cup√©ration)
   * Utilis√© partout dans l'app quand on a besoin d'une position √† jour
   */
  static async getFreshLocation(): Promise<UserLocation | null> {
    try {
      console.log("üîÑ R√©cup√©ration d'une nouvelle position GPS fra√Æche...");

      // V√©rifier les permissions d'abord
      const { status } = await Location.getForegroundPermissionsAsync();
      if (status !== "granted") {
        console.log("‚ùå Permission GPS non accord√©e pour r√©cup√©ration fra√Æche");
        return null;
      }

      // R√©cup√©rer une nouvelle position GPS
      const newLocation = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
        timeInterval: 5000,
        distanceInterval: 10,
      });

      const userLocation: UserLocation = {
        latitude: newLocation.coords.latitude,
        longitude: newLocation.coords.longitude,
      };

      // Mettre √† jour le cache
      this.cachedLocation = userLocation;
      this.lastLocationRequest = Date.now();

      // Sauvegarder la nouvelle position
      await this.saveUserLocation(userLocation);

      console.log("‚úÖ Nouvelle position GPS fra√Æche r√©cup√©r√©e:", userLocation);
      return userLocation;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration d'une position fra√Æche:",
        error
      );

      // Fallback vers la position sauvegard√©e
      const savedLocation = await this.getSavedUserLocation();
      if (savedLocation) {
        console.log("üìç Utilisation de la position sauvegard√©e en fallback");
        return savedLocation;
      }

      return null;
    }
  }

  /**
   * R√©cup√©rer la position GPS de l'utilisateur (sans demander les permissions)
   * Utilis√© par la t√¢che background pour √©viter les demandes r√©p√©t√©es
   */
  static async getCurrentLocationWithoutPermission(): Promise<UserLocation | null> {
    try {
      // Utiliser la fonction centralis√©e pour r√©cup√©rer une position fra√Æche
      console.log("üìç R√©cup√©ration d'une position fra√Æche (background)");
      const freshLocation = await this.getFreshLocation();

      if (freshLocation) {
        console.log(
          "üìç Position fra√Æche r√©cup√©r√©e (background):",
          freshLocation
        );
        return freshLocation;
      }

      // Si pas de position disponible, utiliser la position par d√©faut
      console.log(
        "üìç Aucune position disponible, utilisation de Paris par d√©faut (background)"
      );
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      return defaultCoords;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration de la position (background):",
        error
      );
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      return defaultCoords;
    }
  }

  /**
   * R√©cup√©rer la position GPS de l'utilisateur
   */
  static async getCurrentLocation(): Promise<UserLocation | null> {
    try {
      const stackTrace = new Error().stack?.split("\n")[2]?.trim() || "";
      console.log("üîç DEBUG: getCurrentLocation() appel√© depuis:", stackTrace);

      // Utiliser directement la fonction centralis√©e pour r√©cup√©rer une position fra√Æche
      console.log("üîÑ R√©cup√©ration d'une position fra√Æche...");
      const freshLocation = await this.getFreshLocation();

      if (freshLocation) {
        console.log("‚úÖ Position fra√Æche r√©cup√©r√©e:", freshLocation);
        return freshLocation;
      }

      // Fallback vers la position par d√©faut
      console.log("üìç Utilisation de Paris par d√©faut");
      return {
        latitude: 48.8566,
        longitude: 2.3522,
      };
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration de la localisation:",
        error
      );
      // Mettre √† jour le timestamp m√™me en cas d'erreur
      this.lastLocationRequest = Date.now();
      return (
        this.cachedLocation || {
          latitude: 48.8566,
          longitude: 2.3522,
        }
      );
    }
  }

  /**
   * R√©cup√©rer la position (sauvegard√©e ou GPS)
   */
  static async getUserLocation(
    forceRefresh: boolean = false
  ): Promise<UserLocation> {
    try {
      // Si pas de refresh forc√©, v√©rifier d'abord le stockage
      if (!forceRefresh) {
        const savedLocation = await this.getSavedUserLocation();
        if (savedLocation) {
          console.log(
            "‚úÖ Position trouv√©e dans le stockage, utilisation de la position sauvegard√©e"
          );
          return savedLocation;
        }
      }

      console.log(
        "üìç Aucune position sauvegard√©e - r√©cup√©ration d'une position fra√Æche..."
      );

      // Utiliser la fonction centralis√©e pour r√©cup√©rer une position fra√Æche
      const freshLocation = await this.getFreshLocation();

      if (freshLocation) {
        console.log("‚úÖ Position fra√Æche r√©cup√©r√©e:", freshLocation);
        return freshLocation;
      }

      // Fallback: Paris par d√©faut (sans sauvegarde pour forcer la demande GPS)
      console.log("üìç Utilisation de Paris par d√©faut (temporaire)");
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      // Ne pas sauvegarder pour forcer la demande GPS au prochain d√©marrage
      return defaultCoords;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la r√©cup√©ration de la localisation:",
        error
      );
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      return defaultCoords;
    }
  }

  /**
   * Forcer une nouvelle r√©cup√©ration de position
   */
  static async refreshLocation(): Promise<UserLocation> {
    console.log("üîÑ R√©initialisation de la position...");
    await this.clearSavedLocation();

    // Utiliser directement la fonction centralis√©e pour r√©cup√©rer une position fra√Æche
    const freshLocation = await this.getFreshLocation();

    if (freshLocation) {
      console.log(
        "‚úÖ Position fra√Æche r√©cup√©r√©e apr√®s refresh:",
        freshLocation
      );
      return freshLocation;
    }

    // Fallback vers Paris par d√©faut
    console.log("üìç Utilisation de Paris par d√©faut apr√®s refresh");
    return {
      latitude: 48.8566,
      longitude: 2.3522,
    };
  }

  /**
   * Forcer la r√©cup√©ration GPS et supprimer la position sauvegard√©e
   */
  static async forceGPSLocation(): Promise<UserLocation> {
    try {
      console.log("üîÑ For√ßage de la r√©cup√©ration GPS...");

      // Supprimer la position sauvegard√©e
      await this.clearSavedLocation();

      // Utiliser la fonction centralis√©e pour r√©cup√©rer une position fra√Æche
      const freshLocation = await this.getFreshLocation();

      if (freshLocation) {
        console.log(
          "‚úÖ Position GPS fra√Æche r√©cup√©r√©e et sauvegard√©e:",
          freshLocation
        );
        return freshLocation;
      }

      // Fallback si GPS √©choue
      console.log("‚ùå GPS non disponible, utilisation de Paris par d√©faut");
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      return defaultCoords;
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration GPS forc√©e:", error);
      const defaultCoords: UserLocation = {
        latitude: 48.8566,
        longitude: 2.3522,
      };
      return defaultCoords;
    }
  }
}
