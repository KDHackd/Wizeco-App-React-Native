import * as Location from "expo-location";
import * as Notifications from "expo-notifications";
import { router } from "expo-router";
import * as TaskManager from "expo-task-manager";
import { AppState, AppStateStatus } from "react-native";
import { LOCATION_TASK_NAME_EXPORT } from "../components/backgroundLocationTask";
import ApiService from "./ApiService";
import { AuthService } from "./AuthService";
import { LocationService, UserLocation } from "./LocationService";
import { PermissionService } from "./PermissionService";

export interface LocationNotificationConfig {
  updateInterval: number; // Intervalle en millisecondes (d√©faut: 5 minutes)
  distanceThreshold: number; // Distance minimale en m√®tres pour d√©clencher une mise √† jour (d√©faut: 50m)
  radius: number; // Rayon de recherche pour les notifications (d√©faut: 100m)
  enabled: boolean; // Activer/d√©sactiver le service
}

// Utiliser le nom de t√¢che depuis le fichier externe
const LOCATION_TASK_NAME = LOCATION_TASK_NAME_EXPORT;

// La t√¢che est maintenant d√©finie dans backgroundLocationTask.ts

export class LocationNotificationService {
  private static instance: LocationNotificationService;
  private config: LocationNotificationConfig;
  private updateInterval: ReturnType<typeof setInterval> | null = null;
  private locationSubscription: Location.LocationSubscription | null = null;
  private lastKnownLocation: UserLocation | null = null;
  private isRunning: boolean = false;
  private currentAppState: AppStateStatus = AppState.currentState;
  private appStateSubscription: any = null;
  private lastRequestTime: number = 0;
  private requestCount: number = 0;
  private readonly REQUEST_COOLDOWN = 30000; // 30 secondes entre les requ√™tes
  private readonly MAX_REQUESTS_PER_MINUTE = 2; // Maximum 2 requ√™tes par minute (30s * 2 = 60s)

  private constructor() {
    this.config = {
      updateInterval: 30 * 1000, // 30 secondes
      distanceThreshold: 50, // 50 m√®tres
      radius: 100, // 100 m√®tres
      enabled: true,
    };

    // Configurer la gestion des notifications
    this.setupNotificationHandlers();
  }

  public static getInstance(): LocationNotificationService {
    if (!LocationNotificationService.instance) {
      LocationNotificationService.instance = new LocationNotificationService();
    }
    return LocationNotificationService.instance;
  }

  /**
   * Configurer le service
   */
  public configure(config: Partial<LocationNotificationConfig>): void {
    this.config = { ...this.config, ...config };
    console.log("üîß Service configur√©");
  }

  /**
   * D√©marrer le service de g√©olocalisation en arri√®re-plan
   */
  public async start(): Promise<void> {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è Service de g√©olocalisation d√©j√† en cours d'ex√©cution");
      return;
    }

    if (!this.config.enabled) {
      console.log(
        "üö´ Service de g√©olocalisation d√©sactiv√© dans la configuration"
      );
      return;
    }

    try {
      console.log(
        "üöÄ D√©marrage du service de g√©olocalisation en arri√®re-plan..."
      );

      // V√©rifier les permissions
      const permissions = await PermissionService.checkAllPermissions();
      if (!permissions.location || !permissions.notifications) {
        console.log(
          "‚ùå Permissions manquantes pour le service de g√©olocalisation"
        );
        return;
      }

      // R√©cup√©rer la localisation actuelle et l'envoyer au serveur
      console.log("üìç R√©cup√©ration de la localisation initiale...");
      const currentLocation = await LocationService.getFreshLocation();
      this.lastKnownLocation = currentLocation;
      console.log("üìç Localisation initiale r√©cup√©r√©e:", currentLocation);

      // Envoyer imm√©diatement la position au serveur pour notifications push
      if (currentLocation) {
        console.log(
          "üì§ Envoi de la position au serveur pour notifications push..."
        );
        await this.sendLocationUpdateInBackground(currentLocation);
      }

      console.log(
        "‚è≥ Service pr√™t - notifications toutes les 30s en arri√®re-plan uniquement"
      );

      // D√©marrer la t√¢che en arri√®re-plan imm√©diatement (mais elle ne s'ex√©cutera que quand l'app sera en arri√®re-plan)
      await this.startBackgroundTask();

      // Configurer l'√©coute des changements d'√©tat de l'app
      this.setupAppStateListener();

      this.isRunning = true;
      console.log("‚úÖ Service d√©marr√©");
    } catch (error) {
      console.error("‚ùå Erreur lors du d√©marrage du service:", error);
    }
  }

  /**
   * Arr√™ter le service
   */
  public async stop(): Promise<void> {
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è Service de g√©olocalisation d√©j√† arr√™t√©");
      return;
    }

    console.log("üõë Arr√™t du service de g√©olocalisation...");

    // Arr√™ter la t√¢che en arri√®re-plan
    await this.stopBackgroundTask();

    // Nettoyer l'√©coute des changements d'√©tat
    if (this.appStateSubscription) {
      this.appStateSubscription.remove();
      this.appStateSubscription = null;
      console.log("üëÇ √âcoute des changements d'√©tat supprim√©e");
    }

    this.isRunning = false;
    console.log("‚úÖ Service de g√©olocalisation arr√™t√©");
  }

  /**
   * D√©marrer le tracking en arri√®re-plan
   */
  private async startBackgroundLocationTracking(): Promise<void> {
    try {
      console.log("üöÄ D√©marrage du tracking en arri√®re-plan...");

      // V√©rifier si la t√¢che est d√©j√† en cours
      const isTaskDefined = TaskManager.isTaskDefined(LOCATION_TASK_NAME);
      console.log("üîç T√¢che d√©finie:", isTaskDefined);
      if (!isTaskDefined) {
        console.log("‚ùå T√¢che en arri√®re-plan non d√©finie");
        return;
      }

      // V√©rifier si la t√¢che est d√©j√† en cours d'ex√©cution
      const isTaskRunning = await Location.hasStartedLocationUpdatesAsync(
        LOCATION_TASK_NAME
      );
      console.log("üîç T√¢che en cours:", isTaskRunning);
      if (isTaskRunning) {
        console.log("‚ö†Ô∏è Tracking en arri√®re-plan d√©j√† en cours");
        return;
      }

      // V√©rifier les permissions avant de d√©marrer
      const foregroundStatus = await Location.getForegroundPermissionsAsync();
      const backgroundStatus = await Location.getBackgroundPermissionsAsync();
      console.log("üîç Permissions - Premier plan:", foregroundStatus.status);
      console.log("üîç Permissions - Arri√®re-plan:", backgroundStatus.status);

      if (
        foregroundStatus.status !== "granted" ||
        backgroundStatus.status !== "granted"
      ) {
        console.log(
          "‚ùå Permissions insuffisantes pour le tracking en arri√®re-plan"
        );
        return;
      }

      // D√©marrer le tracking en arri√®re-plan avec foreground service
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
        timeInterval: this.config.updateInterval, // 30 secondes
        distanceInterval: this.config.distanceThreshold, // 50 m√®tres
        foregroundService: {
          notificationTitle: "üéØ Wizeco - Notifications actives",
          notificationBody:
            "Recevez des notifications de promotions √† proximit√©",
          notificationColor: "#4CAF50",
          killServiceOnDestroy: false, // Emp√™cher Android de tuer le service
        },
        // Configuration pour forcer le d√©marrage en arri√®re-plan
        deferredUpdatesInterval: 0, // Pas de d√©lai
        showsBackgroundLocationIndicator: true, // Afficher l'indicateur
      });

      console.log("‚úÖ Tracking en arri√®re-plan d√©marr√©");
    } catch (error) {
      console.error("‚ùå Erreur d√©marrage tracking arri√®re-plan:", error);
    }
  }

  /**
   * D√©marrer le tracking par changement de position
   */
  private startPositionTracking(): void {
    // V√©rifier que le service est toujours actif avant de d√©marrer
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è Service arr√™t√© - tracking par position non d√©marr√©");
      return;
    }

    Location.watchPositionAsync(
      {
        accuracy: Location.Accuracy.Balanced,
        timeInterval: 30000, // 30 secondes
        distanceInterval: this.config.distanceThreshold,
      },
      async (location) => {
        // V√©rifier que le service est toujours actif
        if (!this.isRunning) {
          console.log("‚ö†Ô∏è Service arr√™t√© - arr√™t du tracking par position");
          return;
        }

        try {
          const newLocation: UserLocation = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
          };

          // V√©rifier si la distance est significative
          if (this.shouldUpdateLocation(newLocation)) {
            await this.sendLocationUpdate(newLocation);
          }
        } catch (error) {
          console.error("‚ùå Erreur tracking position:", error);
          // Ne pas arr√™ter le service - continuer en arri√®re-plan
          console.log(
            "üîÑ Service continue en arri√®re-plan malgr√© l'erreur de position"
          );
        }
      }
    ).then((subscription) => {
      this.locationSubscription = subscription;
    });
  }

  /**
   * V√©rifier si la localisation doit √™tre mise √† jour
   */
  private shouldUpdateLocation(newLocation: UserLocation): boolean {
    if (!this.lastKnownLocation) {
      return true;
    }

    // Calculer la distance entre les deux points
    const distance = this.calculateDistance(
      this.lastKnownLocation,
      newLocation
    );

    // Logs r√©duits

    return distance >= this.config.distanceThreshold;
  }

  /**
   * Calculer la distance entre deux points (formule de Haversine)
   */
  private calculateDistance(
    point1: UserLocation,
    point2: UserLocation
  ): number {
    const R = 6371e3; // Rayon de la Terre en m√®tres
    const œÜ1 = (point1.latitude * Math.PI) / 180;
    const œÜ2 = (point2.latitude * Math.PI) / 180;
    const ŒîœÜ = ((point2.latitude - point1.latitude) * Math.PI) / 180;
    const ŒîŒª = ((point2.longitude - point1.longitude) * Math.PI) / 180;

    const a =
      Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
      Math.cos(œÜ1) * Math.cos(œÜ2) * Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
  }

  /**
   * Envoyer la localisation au serveur et mettre √† jour le stockage local
   */
  private async sendLocationUpdate(location: UserLocation): Promise<void> {
    try {
      // Circuit breaker - emp√™cher les requ√™tes en boucle
      const now = Date.now();
      if (
        now - this.lastRequestTime < this.REQUEST_COOLDOWN &&
        this.lastRequestTime > 0
      ) {
        console.log("‚è≥ Cooldown actif - requ√™te ignor√©e");
        return;
      }

      // Reset du compteur toutes les minutes
      if (now - this.lastRequestTime > 60000) {
        this.requestCount = 0;
      }

      // V√©rifier le nombre maximum de requ√™tes
      if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {
        console.log("üö´ Limite de requ√™tes atteinte - circuit breaker activ√©");
        return;
      }

      this.lastRequestTime = now;
      this.requestCount++;

      // Logs r√©duits pour √©viter le spam
      console.log("üì§ Envoi localisation...");

      // 0. V√©rifier que l'utilisateur est connect√© ET a un token JWT
      const authState = await AuthService.getAuthState();
      if (!authState.isConnected) {
        console.log(
          "üîê Utilisateur non connect√© - sauvegarde locale uniquement"
        );
        // Sauvegarder localement mais ne pas envoyer au serveur
        await LocationService.saveUserLocation(location);
        console.log(
          "‚úÖ Localisation sauvegard√©e localement (utilisateur non connect√©)"
        );
        return;
      }

      // V√©rifier que l'utilisateur a bien un token JWT
      try {
        const token = await ApiService.getToken();
        if (!token) {
          console.log(
            "üîê Utilisateur connect√© mais sans token JWT - sauvegarde locale uniquement"
          );
          await LocationService.saveUserLocation(location);
          console.log(
            "‚úÖ Localisation sauvegard√©e localement (pas de token JWT)"
          );
          return;
        }
      } catch (error) {
        console.log(
          "üîê Erreur lors de la v√©rification du token - sauvegarde locale uniquement"
        );
        await LocationService.saveUserLocation(location);
        console.log("‚úÖ Localisation sauvegard√©e localement (erreur token)");
        return;
      }

      console.log(
        "‚úÖ Utilisateur connect√© avec token JWT - envoi au serveur autoris√©"
      );

      // 1. Mettre √† jour le stockage local
      await LocationService.saveUserLocation(location);

      // 2. R√©cup√©rer le token FCM
      const fcmToken = await this.getFCMToken();
      if (!fcmToken) {
        console.log("‚ö†Ô∏è Token FCM non disponible");
        return;
      }

      // 3. Envoyer au serveur pour les notifications (avec gestion d'erreur)
      try {
        const timeoutPromise = new Promise((_, reject) =>
          setTimeout(() => reject(new Error("Timeout")), 20000)
        );

        const sendPromise = ApiService.sendLocationForNotifications(
          location.latitude,
          location.longitude,
          fcmToken,
          this.config.radius,
          AppState.currentState === "active"
        );

        await Promise.race([sendPromise, timeoutPromise]);
        console.log("‚úÖ Localisation envoy√©e");
      } catch (serverError) {
        console.error(
          "‚ùå Erreur serveur (timeout ou erreur r√©seau):",
          serverError instanceof Error
            ? serverError.message
            : String(serverError)
        );
        console.log("üîÑ Arr√™t temporaire des envois pour √©viter le spam");
        // Ne pas arr√™ter le service - juste ignorer les envois temporairement
        // Le service continuera de tourner en arri√®re-plan pour les notifications
        return;
      }

      // 4. Mettre √† jour la derni√®re position connue
      this.lastKnownLocation = location;
    } catch (error) {
      console.error(
        "‚ùå Erreur lors de la mise √† jour de la localisation:",
        error
      );
    }
  }

  /**
   * R√©cup√©rer le token FCM
   */
  private async getFCMToken(): Promise<string | null> {
    try {
      const tokenData = await Notifications.getDevicePushTokenAsync();
      return tokenData.data;
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du token FCM:", error);
      return null;
    }
  }

  /**
   * Forcer une mise √† jour imm√©diate
   */
  public async forceUpdate(): Promise<void> {
    try {
      const currentLocation = await LocationService.getFreshLocation();
      if (currentLocation) {
        await this.sendLocationUpdate(currentLocation);
      }
    } catch (error) {
      console.error("‚ùå Erreur mise √† jour forc√©e:", error);
    }
  }

  /**
   * Envoyer la localisation en arri√®re-plan (sans circuit breaker)
   */
  public async sendLocationUpdateInBackground(
    location: UserLocation
  ): Promise<void> {
    try {
      console.log("üì§ Envoi localisation en arri√®re-plan...");

      // 0. V√©rifier que l'utilisateur est connect√© ET a un token JWT
      const authState = await AuthService.getAuthState();
      if (!authState.isConnected) {
        console.log(
          "üîê Utilisateur non connect√© - sauvegarde locale uniquement"
        );
        await LocationService.saveUserLocation(location);
        return;
      }

      // V√©rifier que l'utilisateur a bien un token JWT
      try {
        const token = await ApiService.getToken();
        if (!token) {
          console.log(
            "üîê Utilisateur connect√© mais sans token JWT - sauvegarde locale uniquement"
          );
          await LocationService.saveUserLocation(location);
          return;
        }
      } catch (error) {
        console.log(
          "üîê Erreur lors de la v√©rification du token - sauvegarde locale uniquement"
        );
        await LocationService.saveUserLocation(location);
        return;
      }

      // 1. Mettre √† jour le stockage local
      await LocationService.saveUserLocation(location);

      // 2. R√©cup√©rer le token FCM
      const fcmToken = await this.getFCMToken();
      if (!fcmToken) {
        console.log("‚ùå Token FCM non disponible");
        return;
      }

      // 3. Envoyer au serveur
      const response = await ApiService.sendLocationForNotifications(
        location.latitude,
        location.longitude,
        fcmToken,
        this.config.radius,
        AppState.currentState === "active"
      );

      console.log(
        "‚úÖ Localisation envoy√©e en arri√®re-plan avec succ√®s:",
        response
      );
    } catch (error) {
      console.error("‚ùå Erreur envoi localisation arri√®re-plan:", error);
    }
  }

  /**
   * Obtenir le statut du service
   */
  public getStatus(): {
    isRunning: boolean;
    lastKnownLocation: UserLocation | null;
    config: LocationNotificationConfig;
  } {
    return {
      isRunning: this.isRunning,
      lastKnownLocation: this.lastKnownLocation,
      config: this.config,
    };
  }

  /**
   * Tester le service en arri√®re-plan
   */
  public async testBackgroundService(): Promise<void> {
    try {
      console.log("üß™ Test du service en arri√®re-plan...");

      // V√©rifier les permissions
      const foregroundStatus = await Location.getForegroundPermissionsAsync();
      const backgroundStatus = await Location.getBackgroundPermissionsAsync();
      console.log(
        "üîç Test - Permissions premier plan:",
        foregroundStatus.status
      );
      console.log(
        "üîç Test - Permissions arri√®re-plan:",
        backgroundStatus.status
      );

      // V√©rifier si la t√¢che est d√©finie
      const isTaskDefined = TaskManager.isTaskDefined(LOCATION_TASK_NAME);
      console.log("üîç Test - T√¢che d√©finie:", isTaskDefined);

      // V√©rifier si la t√¢che est en cours
      const isTaskRunning = await Location.hasStartedLocationUpdatesAsync(
        LOCATION_TASK_NAME
      );
      console.log("üîç Test - T√¢che en cours:", isTaskRunning);

      // Tester l'envoi d'une localisation
      const testLocation: UserLocation = {
        latitude: 6.4586827,
        longitude: 2.3402409,
      };

      console.log("üß™ Test d'envoi de localisation...");
      await this.sendLocationUpdateInBackground(testLocation);

      console.log("‚úÖ Test du service termin√©");
    } catch (error) {
      console.error("‚ùå Erreur lors du test:", error);
    }
  }

  /**
   * Demander √† l'utilisateur de d√©sactiver l'optimisation de la batterie
   */
  public async requestBatteryOptimizationDisable(): Promise<void> {
    try {
      console.log(
        "üîã Demande de d√©sactivation de l'optimisation de la batterie..."
      );

      // Cette fonctionnalit√© n√©cessite une configuration native Android
      // Pour l'instant, on affiche juste un message informatif
      console.log("üì± Pour recevoir des notifications en arri√®re-plan :");
      console.log(
        "1. Allez dans Param√®tres > Batterie > Optimisation de la batterie"
      );
      console.log("2. Trouvez 'Wizeco' dans la liste");
      console.log("3. S√©lectionnez 'Ne pas optimiser'");
      console.log("4. Confirmez votre choix");
    } catch (error) {
      console.error("‚ùå Erreur lors de la demande d'optimisation:", error);
    }
  }

  /**
   * Envoyer la position au serveur pour notifications push (approche alternative)
   */
  public async sendLocationForPushNotifications(): Promise<void> {
    try {
      console.log("üì§ Envoi de la position pour notifications push...");

      const currentLocation = await LocationService.getFreshLocation();
      if (!currentLocation) {
        console.log("‚ùå Impossible de r√©cup√©rer la position");
        return;
      }

      // V√©rifier que l'utilisateur est connect√©
      const authState = await AuthService.getAuthState();
      if (!authState.isConnected) {
        console.log("üîê Utilisateur non connect√© - envoi impossible");
        return;
      }

      // Envoyer au serveur
      await this.sendLocationUpdateInBackground(currentLocation);
      console.log("‚úÖ Position envoy√©e au serveur pour notifications push");
    } catch (error) {
      console.error("‚ùå Erreur envoi position pour push:", error);
    }
  }

  /**
   * Configurer la gestion des notifications
   */
  private setupNotificationHandlers(): void {
    // G√©rer les clics sur les notifications
    Notifications.addNotificationResponseReceivedListener((response) => {
      console.log("üîî Notification cliqu√©e:", response);

      // D√©sactiver compl√®tement le service
      this.stop();
      console.log(
        "üõë Service compl√®tement d√©sactiv√© apr√®s clic sur notification"
      );

      // Rediriger vers l'onglet Home (page d'accueil)
      try {
        router.push("/(tabs)" as any);
        console.log("‚úÖ Redirection vers l'onglet Home (page d'accueil)");
      } catch (error) {
        console.error("‚ùå Erreur redirection:", error);
      }
    });

    // G√©rer les notifications re√ßues en arri√®re-plan
    Notifications.addNotificationReceivedListener((notification) => {
      console.log("üîî Notification re√ßue:", notification);
    });

    console.log("üîî Gestionnaires de notifications configur√©s");
  }

  /**
   * Configurer l'√©coute des changements d'√©tat de l'application
   */
  private setupAppStateListener(): void {
    if (this.appStateSubscription) {
      this.appStateSubscription.remove();
    }

    this.appStateSubscription = AppState.addEventListener(
      "change",
      this.handleAppStateChange.bind(this)
    );
    console.log("üëÇ √âcoute des changements d'√©tat de l'app configur√©e");
  }

  /**
   * G√©rer les changements d'√©tat de l'application
   */
  private async handleAppStateChange(
    nextAppState: AppStateStatus
  ): Promise<void> {
    console.log(
      `üì± Changement d'√©tat: ${this.currentAppState} ‚Üí ${nextAppState}`
    );

    if (
      this.currentAppState.match(/active/) &&
      nextAppState.match(/background/)
    ) {
      console.log(
        "üì§ App en arri√®re-plan ‚Üí v√©rification de la t√¢che background"
      );
      // V√©rifier que le service est toujours en cours d'ex√©cution
      if (this.isRunning) {
        // V√©rifier si la t√¢che est d√©j√† enregistr√©e
        const isRegistered = await TaskManager.isTaskRegisteredAsync(
          LOCATION_TASK_NAME
        );
        if (isRegistered) {
          console.log("‚úÖ T√¢che background d√©j√† active");
        } else {
          console.log(
            "‚ö†Ô∏è T√¢che background non enregistr√©e, red√©marrage report√©"
          );
        }
      } else {
        console.log("‚ö†Ô∏è Service arr√™t√©, red√©marrage complet n√©cessaire");
        // Red√©marrer le service complet si n√©cessaire
        await this.start();
      }
    }

    if (
      this.currentAppState.match(/background/) &&
      nextAppState.match(/active/)
    ) {
      console.log("üì• App au premier plan ‚Üí arr√™t de la t√¢che background");
      await this.stopBackgroundTask();
      // Le service reste actif (isRunning = true), on red√©marrera la t√¢che quand l'app repassera en arri√®re-plan
      console.log(`üîÑ Service toujours actif: ${this.isRunning}`);
    }

    this.currentAppState = nextAppState;
  }

  /**
   * D√©marrer la t√¢che en arri√®re-plan (30s)
   */
  private async startBackgroundTask(): Promise<void> {
    try {
      console.log(`üì± √âtat actuel de l'app: ${AppState.currentState}`);

      // V√©rifier si la t√¢che est d√©j√† enregistr√©e
      const isRegistered = await TaskManager.isTaskRegisteredAsync(
        LOCATION_TASK_NAME
      );

      if (isRegistered) {
        console.log("‚úÖ T√¢che background d√©j√† enregistr√©e");
        return;
      }

      // Ne pas essayer de d√©marrer la t√¢che si l'app est en arri√®re-plan
      if (AppState.currentState !== "active") {
        console.log("‚ö†Ô∏è App en arri√®re-plan, d√©marrage de la t√¢che report√©");
        return;
      }

      console.log("üöÄ D√©marrage de la t√¢che background...");
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
        timeInterval: 30000, // ‚è± toutes les 30s
        distanceInterval: 0, // peu importe la distance
        showsBackgroundLocationIndicator: true, // iOS
        foregroundService: {
          notificationTitle: "üéØ Wizeco - Notifications actives",
          notificationBody: "Ex√©cution toutes les 30 secondes en arri√®re-plan",
          notificationColor: "#4CAF50",
          killServiceOnDestroy: false,
        },
      });
      console.log("‚úÖ T√¢che background 30s d√©marr√©e");
    } catch (error) {
      console.error("‚ùå Erreur d√©marrage t√¢che background:", error);

      // Si l'erreur est li√©e au foreground service, r√©essayer plus tard
      if (
        error instanceof Error &&
        error.message.includes("foreground service")
      ) {
        console.log("üîÑ R√©essai du d√©marrage de la t√¢che dans 2 secondes...");
        setTimeout(async () => {
          // Ne r√©essayer que si l'app est au premier plan
          if (AppState.currentState === "active") {
            await this.startBackgroundTask();
          } else {
            console.log("‚ö†Ô∏è App en arri√®re-plan, r√©essai report√©");
          }
        }, 2000);
      }
      // Si la t√¢che n'est pas trouv√©e, c'est normal, on continue
      else if (
        error instanceof Error &&
        error.message.includes("TaskNotFoundException")
      ) {
        console.log("‚ÑπÔ∏è T√¢che background non trouv√©e, red√©marrage n√©cessaire");
        // Essayer de red√©marrer la t√¢che
        setTimeout(async () => {
          // Ne r√©essayer que si l'app est au premier plan
          if (AppState.currentState === "active") {
            await this.startBackgroundTask();
          } else {
            console.log("‚ö†Ô∏è App en arri√®re-plan, red√©marrage report√©");
          }
        }, 1000);
      }
    }
  }

  /**
   * Arr√™ter la t√¢che en arri√®re-plan
   */
  private async stopBackgroundTask(): Promise<void> {
    try {
      const isRegistered = await TaskManager.isTaskRegisteredAsync(
        LOCATION_TASK_NAME
      );
      if (isRegistered) {
        await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME);
        console.log("üõë T√¢che background arr√™t√©e");
      } else {
        console.log("‚ÑπÔ∏è T√¢che background d√©j√† arr√™t√©e ou non enregistr√©e");
      }
    } catch (error) {
      // Si la t√¢che n'est pas trouv√©e, c'est normal, on continue
      if (
        error instanceof Error &&
        error.message.includes("TaskNotFoundException")
      ) {
        console.log("‚ÑπÔ∏è T√¢che background d√©j√† supprim√©e");
      } else {
        console.error("‚ùå Erreur arr√™t t√¢che background:", error);
      }
    }
  }

  /**
   * Forcer le red√©marrage du service en arri√®re-plan
   */
  public async forceRestartBackgroundService(): Promise<void> {
    try {
      console.log("üîÑ For√ßage du red√©marrage du service en arri√®re-plan...");

      // Arr√™ter le service s'il est en cours
      if (this.isRunning) {
        await this.stop();
        console.log("‚èπÔ∏è Service arr√™t√©");
      }

      // Attendre un peu
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Red√©marrer le service
      await this.start();
      console.log("‚úÖ Service red√©marr√© avec succ√®s");
    } catch (error) {
      console.error("‚ùå Erreur red√©marrage service:", error);
    }
  }
}

// Export de l'instance singleton
export default LocationNotificationService.getInstance();
